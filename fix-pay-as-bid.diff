diff --git a/cli/src/trusted_base_cli/commands/pay_as_bid.rs b/cli/src/trusted_base_cli/commands/pay_as_bid.rs
index bf081b2f..172f8173 100644
--- a/cli/src/trusted_base_cli/commands/pay_as_bid.rs
+++ b/cli/src/trusted_base_cli/commands/pay_as_bid.rs
@@ -30,6 +30,8 @@ use itp_stf_primitives::{
 };
 use log::debug;
 use sp_core::Pair;
+use itp_types::H256;
+use itp_utils::hex::hex_encode;

 #[derive(Parser)]
 pub struct PayAsBidCommand {
@@ -40,14 +42,7 @@ pub struct PayAsBidCommand {

 impl PayAsBidCommand {
 	pub(crate) fn run(&self, cli: &Cli, trusted_args: &TrustedCli) -> CliResult {
-		let results = pay_as_bid(cli, trusted_args, &self.account, &self.orders_string);
-		match results {
-			Ok(res) => Ok(CliResultOk::PayAsBidOutput(res)),
-			Err(e) => {
-				log::error!("Error: {}", e);
-				Err(CliError::TrustedOp { msg: format!("Error in saving Orders: {:?}", e) })
-			},
-		}
+		pay_as_bid(cli, trusted_args, &self.account, &self.orders_string)
 	}
 }

@@ -56,7 +51,7 @@ pub(crate) fn pay_as_bid(
 	trusted_args: &TrustedCli,
 	arg_who: &str,
 	orders_string: &str,
-) -> Result<Option<Vec<u8>>, CliError> {
+) -> CliResult {
 	debug!("arg_who = {:?}", arg_who);
 	let who = get_pair_from_str(trusted_args, arg_who);
 	let signer = get_pair_from_str(trusted_args, arg_who);
@@ -67,18 +62,8 @@ pub(crate) fn pay_as_bid(
 			.sign(&KeyPair::Sr25519(Box::new(signer)), nonce, &mrenclave, &shard)
 			.into_trusted_operation(trusted_args.direct);

-	let res = perform_trusted_operation(cli, trusted_args, &top);
-	match res {
-		Ok(opt) => match opt {
-			Some(_results) => Ok(Some(_results)),
-			None => {
-				println!("CLI None pay_as_bid None block");
-				Ok(None)
-			},
-		},
-		Err(err) => {
-			log::error!("Error in saving Orders: {}", err);
-			Err(CliError::TrustedOp { msg: format!("Error in saving Orders: {}", err) })
-		},
-	}
+	Ok(perform_trusted_operation::<H256>(cli, trusted_args, &top).map(|hash| {
+		println!("{}", hex_encode(hash.as_ref()));
+		CliResultOk::H256{ hash }
+	})?)
 }